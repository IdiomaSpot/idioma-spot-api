# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node_version: ['20.x']
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node_version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node_version }}

    - name: npm install, build and test
      run: |
        npm install
        npm run build
        npm test

    - name: Compress build artifacts
      run: tar -czf build_artifacts.tar.gz dist/ package.json package-lock.json Dockerfile

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4.3.3
      with:
        name: build_artifacts
        path: build_artifacts.tar.gz
        
  deploy:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: build_artifacts

      - name: Decompress build artifacts
        run: tar -xzf build_artifacts.tar.gz -C .

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.DOMAIN }} >> ~/.ssh/known_hosts
          
      - name: Create remote directory
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.VPS_USER }}@${{ secrets.DOMAIN }} "mkdir -p ${{ secrets.PATH }}"

      - name: Copy files via SSH
        run: |
          rsync -avz -e 'ssh -p ${{ secrets.SSH_PORT }}' --delete --exclude '.env' dist/ ${{ secrets.VPS_USER }}@${{ secrets.DOMAIN }}:${{ secrets.PATH }}/dist
          rsync -avz -e 'ssh -p ${{ secrets.SSH_PORT }}' --delete --exclude '.env' package.json package-lock.json Dockerfile ${{ secrets.VPS_USER }}@${{ secrets.DOMAIN }}:${{ secrets.PATH }}
    
      - name: SSH and Deploy
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.VPS_USER }}@${{ secrets.DOMAIN }} << 'EOF'
            cd ${{ secrets.PATH }}
            docker build --network=host -t dev-is-api .
            docker ps --format "{{.ID}}\t{{.Names}}" | while read line
            do
              if [[ $line == *"/dev-is-api"* ]]; then
                container_id=$(echo $line | cut -f1)
                docker stop $container_id
              fi
            done
            docker run -d -p 3000:3000 dev-is-api
          EOF
